clear
close all

%% Create Map

mu = [-5 6; -5 -5; 2.5 2.5; 6 -4];
sigma = cat(3,[4 4],[5 1],[1 3],[2 4]);
map = gmdistribution(mu,sigma);

[f, x_sym] = get_gm_pdf(map);
g = gradient(f);

%plot_gm_contour(map, [-11, 11]);

%% Initialize parameters

% Initital position
x(:,1) = [-10; 0];

% Initital state
s = 0;
overshoot = 0;
compute_spiral_done = 0;

% Number of iterations
n = 1300;

% Initial gradient
d(:,1) = [0; 0];

% Initital AGD parameters
alpha(:,1) = [0.5; 0.5];
u = [1.15; 1.15];

% Save the visited regions
visited = -1;

%% Run the state machine

% First iteration
x(:,2) = x(:,1) + alpha(:,1) .* d(:,1);
alpha(:,2) = alpha(:,1);

i = 2;
ss = 0;
stay = 1;
aux = [-1, -1];
dont_save = 0;
first = 1;
while (i <= n) 
    
    switch s
        case 0
            % Run AGD step
            [x(:,i+1), alpha(:,i+1), d(:,i+1), overshoot] = agd_step(g, x_sym, u, x(:,i), alpha(:,i), d(:,i-1));
            if first == 1
                aux(1) = i-1;
            end
            first = 0;
            
            % check if inside ellipse
            if isa(visited,'struct')
                for j=1:length(visited)
                    if visited(j).f(x(:,end)) <= visited(j).f(visited(j).p)
                        last_pos = visited(end).p;
                        visited(end).p = x(:,i+1);
                        x(:,i+1) = x(:,aux(1));
                        s = 3;
                        overshoot = 0;
                        ss = last_ss;
                        dont_save = 1;
                        spiral  = visited(end).s;
                        break
                    end
                end
            end
            % if no continue
            % if yes go back to the last spiral and update the ellipse p
            % with the current x state
        case 1
            % Run BB step
            [x(:,i+1), alpha(:,i+1), d(:,i+1)] = bb_step(g, x_sym, x(:,i), x(:,i-1), d(:,i-1));
            aux(2) = i+1;
        case 2
            
            
            % Straight line to max
            dv = x(:,aux(2)) - x(:,aux(1));
            tt = linspace(0,1,20);
            for j=1:length(tt)
                x(:,aux(1)+j-1) = x(:,aux(1)) + tt(j) * dv;
                d(:,aux(1)+j-1) = double(subs(g, x_sym, x(:,aux(1)+j-1)));
                alpha(:,aux(1)+j-1) = alpha(:,1);
            end
            
            i = aux(1) + length(tt) -1;
            center = x(:,end);
            
            % Compute spiral parameters
            %delta_r = 0.3;
            %V_clv = 0.2;
            %syms beta
            %nn = 200;
            %beta = linspace(0,7,nn);
            

            %r = sqrt((delta_r * V_clv)/pi)*beta + 0.5;
            %r = 0.3;
            %theta = sqrt((V_clv * 4*pi)/delta_r)*beta;

            %x(1,i+1:i+length(beta)) = x(1,i) + r.*cos(theta);
            %x(2,i+1:i+length(beta)) = x(2,i) + r.*sin(theta);
            %for k=i+1:i+length(beta)
            %    d(:,k) = double(subs(g, x_sym, x(:,k)));
            %    alpha(:,k) = alpha(:,k-1);
            %end
            %i = i+length(beta);
            
            % from x get a grid of points around the center
%             count = 1;
%             for l=0:11
%                 for m=0:11
%                     grid(:,count) = center + [(l-6)*0.2; (m-6)*0.2];
%                     count = count + 1; 
%                 end
%             end
%             
%             count = 1;
%             for l=1:length(beta)
%                 for m=1:length(grid)
%                     
%                     if norm(x(:,i+l-length(beta)) - grid(:,m),2) < 0.05
%                         pp(:,count) = x(:,i+l-length(beta));
%                         count = count + 1;
%                     end
%                 end
%             end
            
            % grid of points
            
            %count = 1;
            %for l=0:7
            %    for m=0:7
            %        pp(:,count) = center + [(l-4)*0.2; (m-4)*0.2];
            %        count = count + 1; 
            %    end
            %end
            
            k = 6;
            m = 0;
            r = 0.2;
            angle = atan2(dv(2), dv(1));
            
            sq_s = get_square_spiral(k, m, r, angle);
            sq_s = center + sq_s;
            x(:,i+1:i+length(sq_s)) = sq_s;
            for k=i+1:i+length(sq_s)
                d(:,k) = double(subs(g, x_sym, x(:,k)));
                alpha(:,k) = alpha(:,k-1);
            end
            i = i + length(sq_s);
            

            
            syms gamma
            delta_r = 2;
            V_clv = 1;
            [spiral, a, b, angle] = compute_spiral(delta_r, V_clv, sq_s, map, gamma, center);
            compute_spiral_done = 1;
            
            
            % find ss which minimizes the distance from the last point of
            % the square spiral to the next point of the ellipse spiral
            ss = ss + 2;
        
        
        case 3
            % Discretize the path and keep spiraling until next maximum
            if stay
                
                ss = ss + 0.1;
                keep_spiraling = 0;
                
                x(:,i+1) = double(subs(spiral, gamma, ss));
                d(:,i+1) = double(subs(g, x_sym, x(:,i+1)));
                alpha(:,i+1) = alpha(:,1);
                
                v = double(subs(spiral, gamma, 0)) - x(:,i+1);
                                
                theta = acos(min(1,max(-1, d(:,i+1).' * v / norm(d(:,i+1)) / norm(v) )));
                
                if isa(visited,'struct')
                    for j=1:length(visited)
                        if visited(j).f(x(:,i+1)) <= visited(j).f(visited(j).p)
                            keep_spiraling = 1;
                            break
                        end
                    end
                end
                
                dn = d(:,i+1)/norm(d(:,i+1));
                vn = v/norm(v);
                
                %theta = sqrt(1 - cos(dot(dn,vn))^2);
                
                theta = dot(dn,vn);
                
                if (theta < 0) && (keep_spiraling == 0)
                    stay = 0;
                    last_ss = ss;
                    ss = 0;
                    first = 1;
                    
                    x(:,i) = x(:,i+1);
                    d(:,i) = d(:,i+1);
                                        
                    % Save the elipse with the shape from the spiral and
                    % radius until the current position
                    f = get_ellipse_2(a,b,angle,x(:, aux(2)));
                    
                    e.f = f;
                    e.p = x(:,i+1);
                    e.s = spiral;
                    
                    if dont_save == 0
                        if isa(visited,'double')
                            visited = e;
                        else
                            visited = [visited,e];
                        end
                    end
                    dont_save = 0;
                end
            end
    end
     
    [s, i, overshoot, compute_spiral_done, stay] = state_machine(s, overshoot, compute_spiral_done, stay, norm(d(:,i)), i);
    
    i = i+1;
end

spline = generate_b_spline(x);

%% Plot Results

plot_optimization_results(map, [-15 15], spline, x(:,1), 'AGD + BB + Spiral + Spline');

